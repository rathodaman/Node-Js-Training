1.)Create New Project
1.) Install Mongoose Express-Session Express-Cookie
	Create user schema 
	Add Data
Default
username:string,
password:string

MySchema
user_email:string,
user_password:string


3.) Adding Passport Authentication In Express Node.js
	npm install passport --save
	npm install passport-local --save

4.)Once you have installed the above dependencies you need to require them inside the app.js file.
	const passport = require('passport');
	const Strategy = require('passport-local').Strategy;

5.)You need to add passport and passport session to the app. Add the following to app.js file :


	app.use(passport.initialize());
	app.use(passport.session());



6.)You need to define the authentication strategy that passport needs to use to validate a request. Add the following code to router.js file :


const passport = require("passport");
var LocalStrategy  = require('passport-local').Strategy;

passport.use(new LocalStrategy({
  usernameField: 'user_email',
  passwordField: 'user_password'
  },
  
  function(username, password, done) {
    UsersModel.findOne({ user_email: username }, function(err, user) {

      console.log("Passport "+ username + password);
      console.log("UserData" + user);

      if (err) { return done(err); }
      
      if (!user) {
        return done(null, false, { message: 'Incorrect username.' });
      }
      if (user.user_password != password) {
        return done(null, false, { message: 'Incorrect password.' }); 
      }
        return done(null, user);
    });
  }
));




To authenticate, Passport first looks at the user's login details, then invokes a verified callback (done). If the user gets properly authenticated, pass the user into the callback. If the user does not get appropriately authenticated, pass false into the callback. You also have the option to pass a specific message into the callback.


7.)need the passport serialize and de-serialize method to store the user information in session and to retrieve back the stored information from session respectively.



passport.serializeUser(function(user, done) {
  done(null, user.user_email);
});

passport.deserializeUser(function(email, done) {
  UsersModel.findOne({ user_email:email }, function(err, user) {
    done(err, user);
  });
});

When you use sessions with Passport, as soon as a user gets appropriately authenticated, a new session begins. When this transpires, we serialize the user data to the session and the user ID is stored in req.session.passport.user. To access the user data it is deserialized, using the user ID as its key. The user data is queried and attached to req.user.



8.)Authenticating Routes Using Passport
Add a login POST route

router.post('/login', function (req, res, next) {
  passport.authenticate('local',{
      failureRedirect : '/login',
      successRedirect :'/welcome',
  })(req,res,next);
});

n our route handler we call passport.authenticate, to which we pass 2 parameters:

'local': The primary strategy we are using
failureRedirect: If the user does not authenticate, they get redirected to the homepage.


8.)

router.get('/welcome', function (req, res, next) {
  console.log(req.user)
  res.send('Welcome' +req.user);
});


9.)Logout


router.get('/logout', function(req, res){
  req.logout();
  res.redirect('/login');
});

http://www.passportjs.org/docs/configure/
http://www.passportjs.org/packages/passport-local/